RollbackError	norm/postgres.html#RollbackError	postgres: RollbackError	
NotFoundError	norm/postgres.html#NotFoundError	postgres: NotFoundError	
dbHostEnv	norm/postgres.html#dbHostEnv	postgres: dbHostEnv	
dbUserEnv	norm/postgres.html#dbUserEnv	postgres: dbUserEnv	
dbPassEnv	norm/postgres.html#dbPassEnv	postgres: dbPassEnv	
dbNameEnv	norm/postgres.html#dbNameEnv	postgres: dbNameEnv	
getDb	norm/postgres.html#getDb	postgres: getDb(): DbConn	
withDb	norm/postgres.html#withDb.t,untyped	postgres: withDb(body: untyped): untyped	
dropDb	norm/postgres.html#dropDb	postgres: dropDb()	
createTables	norm/postgres.html#createTables,,T	postgres: createTables[T: Model](dbConn; obj: T)	
insert	norm/postgres.html#insert,,T	postgres: insert[T: Model](dbConn; obj: var T)	
insert	norm/postgres.html#insert,,openArray[T]	postgres: insert[T: Model](dbConn; objs: var openArray[T])	
select	norm/postgres.html#select,,T,string,varargs[DbValue,dbValue]	postgres: select[T: Model](dbConn; obj: var T; cond: string;\n                 params: varargs[DbValue, dbValue])	
select	norm/postgres.html#select,,seq[T],string,varargs[DbValue,dbValue]	postgres: select[T: Model](dbConn; objs: var seq[T]; cond: string;\n                 params: varargs[DbValue, dbValue])	
selectAll	norm/postgres.html#selectAll,,seq[T]	postgres: selectAll[T: Model](dbConn; objs: var seq[T])	
update	norm/postgres.html#update,,T	postgres: update[T: Model](dbConn; obj: var T)	
update	norm/postgres.html#update,,openArray[T]	postgres: update[T: Model](dbConn; objs: var openArray[T])	
delete	norm/postgres.html#delete,,T	postgres: delete[T: Model](dbConn; obj: var T)	
delete	norm/postgres.html#delete,,openArray[T]	postgres: delete[T: Model](dbConn; objs: var openArray[T])	
rollback	norm/postgres.html#rollback	postgres: rollback()	
transaction	norm/postgres.html#transaction.t,,untyped	postgres: transaction(dbConn; body: untyped): untyped	
